name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: example
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with Gradle
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: suzhanlee-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.suzhanlee-ecr.outputs.registry }}
          ECR_REPOSITORY: suzhanlee
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg SPRING_DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} --build-arg SPRING_DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} --build-arg SPRING_DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create role.yaml
        run: |
          cat <<EOF > role.yaml
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            namespace: default
            name: secret-deleter
          rules:
          - apiGroups: [""]
            resources: ["secrets"]
            verbs: ["delete"]
          EOF

      - name: Create rolebinding.yaml
        run: |
          cat <<EOF > rolebinding.yaml
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: secret-deleter-binding
            namespace: default
          subjects:
          - kind: User
            name: suzhanlee
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: Role
            name: secret-deleter
            apiGroup: rbac.authorization.k8s.io
          EOF

      - name: Apply role and rolebinding
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl apply -f role.yaml
          kubectl apply -f rolebinding.yaml

      - name: Create Kubernetes Secret
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl delete secret db-credentials --ignore-not-found
          kubectl create secret generic db-credentials \
            --from-literal=spring.datasource.url=${{ secrets.DATASOURCE_URL }} \
            --from-literal=spring.datasource.username=${{ secrets.DATASOURCE_USERNAME }} \
            --from-literal=spring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }}
